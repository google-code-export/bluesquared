# Copyright: 2007-2011 Paul Obermeier (obermeier@poSoft.de)
# Distributed under BSD license.

package provide tcomexcel 0.4.1

namespace eval ::Excel {

    proc CopyChartToClipboard { chartId } {
        variable excelVersion

        # CopyPicture does not work with Excel 2007. It only copies 
        # Metafiles into the clipboard.
        if { $excelVersion >= 12.0 } {
            set chartArea [$chartId ChartArea]
            $chartArea Copy 
        } else {
            $chartId CopyPicture $::Excel::xlScreen $::Excel::xlBitmap \
                                 $::Excel::xlScreen
        }
    }

    proc SaveChartToFile { chartId fileName { filterType "GIF" } } {
        set fileName [file nativename $fileName]
        $chartId Export $fileName $filterType
    }

    proc SetChartSize { worksheetId chartId width height } {
        # The name of the chart is returned as a long name containing of
        # the worksheet name and the diagram name. As both the worksheet
        # name and the diagram name may have spaces, it is difficult to 
        # distinguish bewtween the two.
        # We assume that the last two words are the diagram name, which is
        # generated by Excel as "Diagram #" by default.
        # Using the long name as index to the Item property does not work.
        set chartFullName [$chartId Name]
        set chartSplit [split $chartFullName]
        append chartName [lindex $chartSplit end-1] " "
        append chartName [lindex $chartSplit end]

        set shapes [$worksheetId Shapes]
        set chart [$shapes Item $chartName]
        # This is also an Excel mystery. After setting the width and height
        # to the correct size (i.e. use width and height unchanged), Excel
        # says, it has changed the shape to the correct size.
        # But the diagram as displayed and also the exported bitmap has a 
        # size 4/3 greater than expected. 
        # We correct for that discrepancy here by multiplying with 3/4.
        $chart Width  [expr $width  * 0.75]
        $chart Height [expr $height * 0.75]
    }

    # Set the minimum and maximum scale of both axes of a chart.
    proc SetChartScale { chartId xmin xmax ymin ymax } {
        set xaxis [[$chartId Axes] Item $::Excel::xlPrimary]
        $xaxis MinimumScale [expr $xmin]
        $xaxis MaximumScale [expr $xmax]
        set yaxis [[$chartId Axes] Item $::Excel::xlSecondary]
        $yaxis MinimumScale [expr $ymin]
        $yaxis MaximumScale [expr $ymax]
    }

    # Set the minimum scale of an axis of a chart.
    # The axisName parameter must be either "x" or "y".
    proc SetChartMinScale { chartId axisName value } {
        if { $axisName eq "x" || $axisName eq "X" } {
            set axis [[$chartId Axes] Item $::Excel::xlPrimary]
        } else {
            set axis [[$chartId Axes] Item $::Excel::xlSecondary]
        }
        $axis MinimumScale [expr $value]
    }

    # Set the maximum scale of an axis of a chart.
    # The axisName parameter must be either "x" or "y".
    proc SetChartMaxScale { chartId axisName value } {
        if { $axisName eq "x" || $axisName eq "X" } {
            set axis [[$chartId Axes] Item $::Excel::xlPrimary]
        } else {
            set axis [[$chartId Axes] Item $::Excel::xlSecondary]
        }
        $axis MaximumScale [expr $value]
    }

    # Place a chart as an object into a worksheet.
    proc PlaceChart { chartId worksheetId } {
        set newChartId [$chartId Location $::Excel::xlLocationAsObject \
                        [::Excel::GetWorksheetName $worksheetId]]
        return $newChartId
    }

    proc CreateChart { cellsId chartType } {
        set appId [GetApplicationId $cellsId]

        switch [::Excel::GetVersion $appId] {
            "12.0" {
                set worksheetId [$cellsId Worksheet]
                set chartId [[[$worksheetId Shapes] AddChart $chartType] Chart]
            }
            default {
                set chartId [[$appId Charts] Add]
                $chartId ChartType $chartType
            }
        }
        return $chartId
    }

    # Create a line chart. Generic case.
    #
    # Data for the x-axis is taken from column "xaxisCol", starting at row "startRow".
    # Names for the lines are taken from row "headerRow", starting at column "startCol".
    # The data range for the "numCols" lines starts at (row=startRow,col=startCol)
    # and goes to (row=startRow+numRows-1,col=startCol+numCols-1).
    # Optionally a chart title, the name of the y-axis and the marker size can 
    # be specified.
    proc AddLineChart { cellsId headerRow xaxisCol startRow numRows startCol numCols \
                       { title "" } { yaxisName "Values" } { markerSize 5 } } {
        # Create the line chart.
        set chartId [::Excel::CreateChart $cellsId $::Excel::xlLineMarkers]

        # Select the range of data.
        set rangeId [SelectRangeByIndex $cellsId $startRow $startCol \
                     [expr $startRow+$numRows-1] [expr $startCol+$numCols-1]]
        $chartId SetSourceData $rangeId $::Excel::xlColumns

        # Select the column containing the data for the x-axis.
        set xrangeId [SelectRangeByIndex $cellsId $startRow $xaxisCol \
                      [expr $startRow+$numRows-1] $xaxisCol]

        # Set the x-axis, name and marker size for each line.
        for { set i 1 } { $i <= $numCols } { incr i } {
            [[$chartId SeriesCollection] Item $i] XValues $xrangeId
            set name [GetCellValue $cellsId $headerRow [expr {$startCol+$i-1}]]
            [[$chartId SeriesCollection] Item $i] Name $name
            [[$chartId SeriesCollection] Item $i] MarkerSize $markerSize
        }

        # Set the names for the x-axis and the y-axis.
        set axis [[$chartId Axes] Item $::Excel::xlPrimary]
        $axis HasTitle True
        [[$axis AxisTitle] Characters] Text [GetCellValue $cellsId $headerRow $xaxisCol]

        set axis [[$chartId Axes] Item $::Excel::xlSecondary]
        $axis HasTitle True
        [[$axis AxisTitle] Characters] Text $yaxisName

        # Set the chart title.
        if { $title ne "" } {
            $chartId HasTitle True
            [[$chartId ChartTitle] Characters] Text $title
        } else {
            $chartId HasTitle False
        }

        set plotArea [$chartId PlotArea]
        [$plotArea Interior] ColorIndex [expr $::Excel::xlColorIndexNone]

        return $chartId
    }

    # Create a line chart. Simple case.
    #
    # Data for the x-axis is taken from column 1, starting at row 2.
    # Names for the lines are taken from row 1, starting at column 2.
    # The data range for the "numCols" lines starts at (row=2,col=2)
    # and goes to (row=numRows+1,col=numCols+1).
    # Optionally a chart title and the marker size can be specified.
    proc AddLineChartSimple { cellsId numRows numCols { title "" } { markerSize 5 } } {
        return [AddLineChart $cellsId 1 1  2 $numRows  2 $numCols \
                             $title "Values" $markerSize]
    }

    # Create a point chart. Simple case.
    #
    # Data for the x-axis is taken from column "col1", starting at row 2.
    # Data for the y-axis is taken from column "col2", starting at row 2.
    # Names for the axes are taken from row 1, columns "col1" and "col2".
    # Optionally a chart title and the marker size can be specified.
    proc AddPointChartSimple { cellsId numRows col1 col2 { title "" } { markerSize 5 } } {
        # Create the point chart.
        set chartId [::Excel::CreateChart $cellsId $::Excel::xlXYScatter]

        # Select the range of cells to be used as data.
        # Data of col1 is the X axis. Data of col2 is the Y axis.
        set rangeId [SelectRangeByIndex $cellsId 2 $col2 [expr $numRows+1] $col2]
        $chartId SetSourceData $rangeId $::Excel::xlColumns

        set xrangeId [SelectRangeByIndex $cellsId 2 $col1 [expr $numRows+1] $col1]
        [[$chartId SeriesCollection] Item 1] XValues $xrangeId

        [[$chartId SeriesCollection] Item 1] MarkerSize $markerSize

        # Set chart specific properties.
        # Switch of legend display.
        $chartId HasLegend False

        # Set the chart title string.
        if { $title ne "" } {
            $chartId HasTitle True
            [[$chartId ChartTitle] Characters] Text $title
        } else {
            $chartId HasTitle False
        }

        # Do not fill the chart interior area. Better for printing.
        set plotArea [$chartId PlotArea]
        [$plotArea Interior] ColorIndex [expr $::Excel::xlColorIndexNone]

        # Set axis specific properties.
        # Set the X axis description to cell col1 in row 1.
        set axis [[$chartId Axes] Item $::Excel::xlPrimary]
        $axis HasTitle True
        [[$axis AxisTitle] Characters] Text [GetCellValue $cellsId 1 $col1]
        # Set the display of major and minor gridlines.
        $axis HasMajorGridlines True
        $axis HasMinorGridlines False

        # Set the Y axis description to cell col2 in row 1.
        set axis [[$chartId Axes] Item $::Excel::xlSecondary]
        $axis HasTitle True
        [[$axis AxisTitle] Characters] Text [GetCellValue $cellsId 1 $col2]
        # Set the display of major and minor gridlines.
        $axis HasMajorGridlines True
        $axis HasMinorGridlines False

        return $chartId
    }

    # Create a radar chart. Simple case.
    #
    # Data for the "x-axis" is taken from column 1, starting at row 2.
    # Names for the lines are taken from row 1, starting at column 2.
    # The data range for the "numCols" plots starts at (row=2,col=2)
    # and goes to (row=numRows+1,col=numCols+1).
    # Optionally a chart title can be specified.
    proc AddRadarChartSimple { cellsId numRows numCols { title "" } } {
        # Create the radar chart. Default is filled.
        set chartId [::Excel::CreateChart $cellsId $::Excel::xlRadarFilled]

        # Select the range of cells to be used as data.
        set rangeId [SelectRangeByIndex $cellsId 2 2 \
                     [expr $numRows+1] [expr $numCols+1]]
        $chartId SetSourceData $rangeId $::Excel::xlColumns

        set xrangeId [SelectRangeByIndex $cellsId 2 1 [expr $numRows+1] 1]
        for { set i 1 } { $i <= $numCols } { incr i } {
            [[$chartId SeriesCollection] Item $i] XValues $xrangeId
            set name [GetCellValue $cellsId 1 [expr $i +1]]
            [[$chartId SeriesCollection] Item $i] Name $name
        }

        # Set chart specific properties.
        # Switch on legend display.
        $chartId HasLegend True

        # Set the chart title string.
        if { $title ne "" } {
            $chartId HasTitle True
            [[$chartId ChartTitle] Characters] Text $title
        } else {
            $chartId HasTitle False
        }

        # Do not fill the chart interior area. Better for printing.
        set plotArea [$chartId PlotArea]
        [$plotArea Interior] ColorIndex [expr $::Excel::xlColorIndexNone]

        # Set axis specific properties.
        set axis [[$chartId Axes] Item $::Excel::xlPrimary]
        # Set the display of major and minor gridlines.
        $axis HasMajorGridlines False
        $axis HasMinorGridlines False

        set axis [[$chartId Axes] Item $::Excel::xlSecondary]
        # Set the display of major and minor gridlines.
        $axis HasMajorGridlines True
        $axis HasMinorGridlines False

        return $chartId
    }
}
